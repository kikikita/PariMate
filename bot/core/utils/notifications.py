import datetime as dt
from aiogram import Bot
from core.keyboards.inline import (
    pari_report_from_notify, pari_find_restart, tech_report)
from core.database.bd import (
    bd_notifications_select, bd_notify_delete,  bd_find_time_select,
    bd_find_category_update, bd_last_day_select, bd_report_delete,
    bd_status_clear, bd_chat_delete, bd_notify_update,
    bd_report_ignore, bd_get_statistics)
from settings import settings


async def send_statistics(bot: Bot):
    stats = await bd_get_statistics()
    time = dt.datetime.now().strftime("%d-%m-%y %H:%M")
    try:
        await bot.send_message(
            settings.bots.tech_id,
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PariMate –Ω–∞ {time}' +
            f'\n\n–£—á–∞—Å—Ç–≤—É—é—Ç –≤ –ø–∞—Ä–∏: {stats["in_pari"]}' +
            f'\n–ù–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ: {stats["in_find"]}' +
            f'\n–°–≤–æ–±–æ–¥–Ω–æ —á–∞—Ç–æ–≤: {stats["empty_chats"]}' +
            f'\n\n–õ—é–¥–µ–π –Ω–∞ 1–π –Ω–µ–¥–µ–ª–µ: {stats["users_1_week"]}' +
            f'\n–õ—é–¥–µ–π –Ω–∞ 2–π –Ω–µ–¥–µ–ª–µ: {stats["users_2_week"]}' +
            f'\n–õ—é–¥–µ–π –Ω–∞ 3–π+ –Ω–µ–¥–µ–ª–µ: {stats["users_3_week"]}'
            )
    except Exception:
        return


async def send_notifications(bot: Bot):
    rows = await bd_notifications_select(
        (dt.datetime.now()).replace(minute=0, second=0, microsecond=0)
    )
    await bd_notify_delete()
    if rows:
        data = [dict(row) for row in rows]
        for user_id in data:
            await bot.send_message(
                chat_id=user_id['user_id'],
                text='–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–Ω–∏—à—å, —Ç—ã —Ö–æ—Ç–µ–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å ' +
                '–Ω–æ–≤—É—é –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É? –°–∫–æ—Ä–µ–µ –∑–∞–≥—Ä—É–∂–∞–π ' +
                '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –≠—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É!',
                reply_markup=pari_report_from_notify(int(user_id['user_id'])))
    else:
        pass


async def change_category_find(bot: Bot):
    long_time_find, ignore = await bd_find_time_select()
    if long_time_find and ignore:
        data = [dict(row) for row in long_time_find]
        for user in data:
            await bd_find_category_update(user['user_id'])
        ignore_data = [dict(row) for row in ignore]
        for user in ignore_data:
            await bot.send_message(
                user['user_id'],
                'üïë –¢–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∞... ' +
                '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                reply_markup=pari_find_restart())
            await bd_status_clear(user['user_id'],
                                  pari_end_cause='long_time_accept')
    elif long_time_find:
        data = [dict(row) for row in long_time_find]
        for user in data:
            await bd_find_category_update(user['user_id'])
    elif ignore:
        ignore_data = [dict(row) for row in ignore]
        for user in ignore_data:
            await bot.send_message(
                user['user_id'],
                'üïë –¢–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∞... ' +
                '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                reply_markup=pari_find_restart())
            await bd_status_clear(user['user_id'],
                                  pari_end_cause='long_time_accept')
    else:
        return
    return


async def check_ignore_reports(bot: Bot):
    ignore_1_day, ignore_2_day = await bd_report_ignore()
    good_data = [dict(row) for row in ignore_1_day]
    bad_data = [dict(row) for row in ignore_2_day]

    for user in good_data:
        try:
            message = ('–•—ç–π! –¢–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –∂–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ' +
                       '—Å–≤–æ–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫!' +
                       '\n–ï—â–µ –¥–µ–Ω—å, –∏ –Ω–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–±—è –∏–∑ –ø–∞—Ä–∏(')
            await bot.send_message(user['pari_mate_id'], message,
                                   reply_markup=tech_report(user['user_id']))
        except Exception:
            continue

    for user in bad_data:
        try:
            message = ('–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–µ –ø–æ–¥–≤–µ—Ä–∂–¥–∞–ª –æ—Ç—á–µ—Ç—ã '
                       '—Å–≤–æ–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –±–æ–ª—å—à–µ –¥–≤—É—Ö –¥–Ω–µ–π.'
                       '\n–ü–æ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–±—è '
                       '–∏–∑ –ø–∞—Ä–∏ –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å(')
            await bot.send_message(user['pari_mate_id'], message)
            try:
                await bot.send_message(
                    user['user_id'],
                    '‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –Ω–∞–ø–∞—Ä–Ω–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã,' +
                    ' –∏ –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∏–∑ –ø–∞—Ä–∏.' +
                    '\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ' +
                    '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —á–µ—Ä–µ–∑ '
                    '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞, –∞ –º—ã –∑–∞–º–µ–Ω–∏–º –≤–∞—à–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞!')
            except Exception:
                pass
            try:
                await bot.send_message(
                    settings.bots.tech_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –æ—Å—Ç–∞–ª—Å—è " +
                    "–±–µ–∑ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö",
                    reply_markup=tech_report(user['user_id']))
            except Exception:
                pass
            await bd_report_delete(user['pari_mate_id'])
            await bd_status_clear(user['pari_mate_id'],
                                  pari_end_cause='report_ignore')
            await bd_chat_delete(user['pari_mate_id'], bot=bot)
        except Exception:
            continue

    return


async def last_day_notify(bot: Bot):
    good_result, bad_result = await bd_last_day_select()
    if good_result:
        good_data = [dict(row) for row in good_result]
        for user in good_data:
            try:
                await bot.send_message(
                    user['user_id'],
                    f'–ü—Ä–∏–≤–µ—Ç, {user["name"]} üëã' +
                    '\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º ' +
                    f'{user["habit_week"]}-–π –Ω–µ–¥–µ–ª–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏! üéâ' +
                    '\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é, ' +
                    '–ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
                    )
                if user["habit_week"] == 3:
                    await bot.send_message(
                        user['user_id'],
                        'üéÅ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 3-–π –Ω–µ–¥–µ–ª–∏ –æ–∑–Ω–∞—á–∞–µ—Ç, ' +
                        '—á—Ç–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ' +
                        '–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ Ozon!' +
                        '\n\n–î–ª—è —ç—Ç–æ–≥–æ, –ø—Ä–æ–π–¥–∏ –æ–ø—Ä–æ—Å –ø–æ —Å—Å—ã–ª–∫–µ,'
                        '–≤ –∫–æ–Ω—Ü–µ –æ–ø—Ä–æ—Å–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π tg-–ø—Ä–æ—Ñ–∏–ª—å. ' +
                        '–ñ–µ–ª–∞—é —É–¥–∞—á–∏!' +
                        '\n\nhttps://forms.gle/omTKXF9S2humZqPa6')
                await bd_notify_update(user['user_id'])
            except Exception:
                continue
    if bad_result:
        bad_data = [dict(row) for row in bad_result]
        for user in bad_data:
            try:
                await bot.send_message(
                    user['user_id'],
                    f'–ü—Ä–∏–≤–µ—Ç, {user["name"]}!' +
                    '\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—Å–µ–≥–æ ' +
                    f'{user["pari_reports"] if user["pari_reports"] else 0} ' +
                    '–¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏, ' +
                    f'–≤–º–µ—Å—Ç–æ {user["habit_frequency"]} –ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö(' +
                    '\n–¢–≤–æ–µ –ø–∞—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. ' +
                    '–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!'
                )
                if user['pari_mate_id']:
                    try:
                        await bot.send_message(
                            user['pari_mate_id'],
                            '‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∏—Å–∫–ª—é—á–∏—Ç—å –≤–∞—à–µ–≥–æ ' +
                            '–Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –∏–∑ –ø–∞—Ä–∏, –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ ' +
                            '–∫–æ–ª-–≤–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. –°–æ–≤–º–µ—Å—Ç–Ω—ã–π —á–∞—Ç —É–¥–∞–ª–µ–Ω.' +
                            '\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å ' +
                            '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —á–µ—Ä–µ–∑ '
                            '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞, –∞ –º—ã –∑–∞–º–µ–Ω–∏–º –≤–∞—à–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞!')
                    except Exception:
                        pass
                    try:
                        await bot.send_message(
                            settings.bots.tech_id,
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['pari_mate_id']} –æ—Å—Ç–∞–ª—Å—è " +
                            '–±–µ–∑ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö',
                            reply_markup=tech_report(user['user_id'])
                        )
                    except Exception:
                        pass
                    await bd_report_delete(user['user_id'])
                    await bd_status_clear(user['user_id'],
                                          pari_end_cause='not_enough_reports')
                    await bd_chat_delete(user['user_id'], bot=bot)
            except Exception:
                continue
