import datetime as dt
from aiogram import Bot
from core.keyboards.inline import pari_report_from_notify, pari_find_restart
from core.database.bd import (
    bd_notifications_select, bd_notify_delete,  bd_find_time_select,
    bd_find_category_update, bd_last_day_select, bd_report_delete,
    bd_status_clear, bd_chat_delete, bd_get_chat_id, bd_notify_update)
from settings import settings


async def send_notifications(bot: Bot):
    rows = await bd_notifications_select(
        (dt.datetime.now()).replace(minute=0, second=0, microsecond=0)
    )
    await bd_notify_delete()
    if rows:
        data = [dict(row) for row in rows]
        for user_id in data:
            await bot.send_message(
                chat_id=user_id['user_id'],
                text='–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–Ω–∏—à—å, —Ç—ã —Ö–æ—Ç–µ–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å ' +
                '–Ω–æ–≤—É—é –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É? –°–∫–æ—Ä–µ–µ –∑–∞–≥—Ä—É–∂–∞–π ' +
                '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –≠—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥ –Ω–∞ –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É!',
                reply_markup=pari_report_from_notify(int(user_id['user_id'])))
    else:
        pass


async def change_category_find(bot: Bot):
    long_time_find, ignore = await bd_find_time_select()
    if long_time_find and ignore:
        data = [dict(row) for row in long_time_find]
        for user in data:
            await bd_find_category_update(user['user_id'])
        ignore_data = [dict(row) for row in ignore]
        for user in ignore_data:
            await bot.send_message(
                user['user_id'],
                'üïë –¢–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∞... ' +
                '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                reply_markup=pari_find_restart())
            await bd_status_clear(user['user_id'])
    elif long_time_find:
        data = [dict(row) for row in long_time_find]
        for user in data:
            await bd_find_category_update(user['user_id'])
    elif ignore:
        ignore_data = [dict(row) for row in ignore]
        for user in ignore_data:
            await bot.send_message(
                user['user_id'],
                'üïë –¢–≤–æ–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∞... ' +
                '–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                reply_markup=pari_find_restart())
            await bd_status_clear(user['user_id'])
    else:
        return
    return


async def check_ignore_reports(bot: Bot):
    pass


async def last_day_notify(bot: Bot):
    good_result, bad_result = await bd_last_day_select()
    if good_result and bad_result:
        good_data = [dict(row) for row in good_result]
        bad_data = [dict(row) for row in bad_result]
        for user in good_data:
            try:
                await bot.send_message(
                    user['user_id'],
                    f'–ü—Ä–∏–≤–µ—Ç, {user["name"]} üëã' +
                    '\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º ' +
                    f'{user["habit_week"]}-–π –Ω–µ–¥–µ–ª–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏! üéâ' +
                    '\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é, ' +
                    '–ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
                    )
                await bd_notify_update(user['user_id'])
            except Exception:
                continue
        for user in bad_data:
            try:
                await bot.send_message(
                    user['user_id'],
                    f'–ü—Ä–∏–≤–µ—Ç, {user["name"]}!' +
                    '\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—Å–µ–≥–æ ' +
                    f'{user["pari_reports"]} –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏, ' +
                    f'–≤–º–µ—Å—Ç–æ {user["habit_frequency"]} –ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö(' +
                    '\n–¢–≤–æ–µ –ø–∞—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. ' +
                    '–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!'
                    )
                chat = await bd_get_chat_id(user_id=user['user_id'])
                if chat and user['user_id'] != settings.bots.admin_id:
                    await bot.ban_chat_member(
                        str(chat['chat_id']), user['user_id'])
                await bd_report_delete(user['user_id'])
                await bd_status_clear(user['user_id'])
                await bd_chat_delete(user['user_id'])
            except Exception:
                continue
    elif good_result:
        good_data = [dict(row) for row in good_result]
        for user in good_data:
            try:
                await bot.send_message(
                    user['user_id'],
                    f'–ü—Ä–∏–≤–µ—Ç, {user["name"]} üëã' +
                    '\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Ç–µ–±—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º ' +
                    f'{user["habit_week"]}-–π –Ω–µ–¥–µ–ª–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏! üéâ' +
                    '\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é, ' +
                    '–ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
                    )
                await bd_notify_update(user['user_id'])
            except Exception:
                continue
    elif bad_result:
        bad_data = [dict(row) for row in bad_result]
        for user in bad_data:
            try:
                await bot.send_message(
                    user['user_id'],
                    f'–ü—Ä–∏–≤–µ—Ç, {user["name"]}!' +
                    '\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—Å–µ–≥–æ ' +
                    f'{user["pari_reports"]} –¥–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏, ' +
                    f'–≤–º–µ—Å—Ç–æ {user["habit_frequency"]} –ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö(' +
                    '\n–¢–≤–æ–µ –ø–∞—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞ –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. ' +
                    '–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!'
                    )
                chat = await bd_get_chat_id(user_id=user['user_id'])
                if chat and user['user_id'] != settings.bots.admin_id:
                    await bot.ban_chat_member(
                        str(chat['chat_id']), user['user_id'])
                    await bd_report_delete(user['user_id'])
                    await bd_status_clear(user['user_id'])
                    await bd_chat_delete(user['user_id'])
            except Exception:
                continue
    else:
        return
    return
