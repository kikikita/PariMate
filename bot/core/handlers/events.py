from aiogram import Router
from aiogram.types import ChatMemberUpdated
from aiogram.filters import ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from core.database.bd import bd_user_select


router = Router()


def join_message(habit: str):
    # habit_list = [
    #     'заниматься спортом', 'правильно питаться', 'пить воду',
    #     'принимать добавки', 'делать зарядку', 'гулять',
    #     'изучать новый навык', 'читать', 'проходить учебный курс',
    #     'вести дневник', 'изучать новый язык', 'медитировать',
    #     'соблюдать режим сна', 'планировать задачи на день',
    #     'проводить меньше времени в телефоне']
    if habit == 'заниматься спортом':
        text = 'присылать фото/видео подтверждение физической активности.'
    elif habit == 'правильно питаться':
        text = ('присылать фото еды, которую потребляешь/' +
                'скриншоты приложения для подсчета калорий.')
    elif habit == 'пить воду':
        text = ('присылать фото наполненной бутылки воды утром, а ' +
                'вечером прислать фото того, что бутылка пуста.')
    elif habit == 'принимать добавки':
        text = 'каждый раз присылать добавок до их приема.'
    elif habit == 'делать зарядку':
        text = 'присылать фото/видео, как делаешь зарядку с утра.'
    elif habit == 'гулять':
        text = 'присылать фото/видео-кружочки с прогулки.'
    elif habit == 'изучать новый навык':
        text = 'присылать видео-кружочек с тем, как развиваешь новый навык.'
    elif habit == 'читать':
        text = ('присылать кружочек с тем, как читаешь, ' +
                'кратко пересказывать прочитанное за этот подход.')
    elif habit == 'проходить учебный курс':
        text = ('присылать скриншот прогресса курса, описывать,' +
                'пройденные этапы, какие были сложности.')
    elif habit == 'вести дневник':
        text = ('присылать скриншот/фотографию заполненного ' +
                'содержимое можно заблюрить) дневника, описывать, ' +
                'где были сложности в выполнении этого действия.')
    elif habit == 'изучать новый язык':
        text = 'присылать фото/видео/скриншоты пройденных заданий/тестов.'
    elif habit == 'медитировать':
        text = ('описывать, какие были трудности в выполнении ' +
                'этого действия, а также то, что было успешным/приятным.')
    elif habit == 'соблюдать режим сна':
        text = ('присылать фото/видео-кружочки в назначенное время подъема,' +
                'а также присылать скриншот из приложения "здоровье".')
    elif habit == 'планировать задачи на день':
        text = ('присылать фотографию/скриншот/ запланированных дел,' +
                'описывать, где были трудности в планировании и реализации.')
    elif habit == 'проводить меньше времени в телефоне':
        text = 'присылать скриншот экранного времени в телефоне.'
    else:
        return ''
    return (f'\n\nНапример, для своей привычки, ты можешь {text} ' +
            'Если предложенный способ тебе не подходит, вы ' +
            'всегда можете договориться с напарником о предпочтительном ' +
            'варианте подтверждения индивидуально. Ведь главное - это ' +
            'ваш комфорт и результат!')


@router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))
async def on_user_join(event: ChatMemberUpdated):

    user = await bd_user_select(event.new_chat_member.user.id)
    await event.answer(
        f'Привет, {user["name"]}! В этом чате, вы с напарником будете ' +
        'подтверждать соблюдение выбранных вами привычек.' +
        '\nНо перед тем, как начать, вот тебе парочка рекомендаций👇')
    text = join_message(user["habit_choice"].lower())
    await event.answer(
        f'Твоя цель - {user["habit_choice"].lower()} ' +
        f'{user["habit_frequency"]} раз(-а) в неделю' +
        '\n\nВ течение ближайшей недели присылай сюда фото или видео-' +
        'подтверждения того, как внедряешь привычку в свою жизнь.' +
        f'{text}' +
        '\n\nРассказывайте о трудностях и успехах, поддерживайте друг друга,' +
        ' и помните, что вы здесь для того, чтобы стать лучшей версией себя!')


@router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
async def on_user_left(event: ChatMemberUpdated):
    await event.answer(f'Прощай, {(event.old_chat_member.user.first_name)}')
