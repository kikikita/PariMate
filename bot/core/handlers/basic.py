from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message
from core.keyboards.inline import get_start_kb, get_main_menu, get_user_link
from aiogram.fsm.context import FSMContext
from core.database.bd import bd_chat_create, bd_get_chat_id, bd_user_select
from core.filters.chat_type import ChatTypeFilter
from settings import settings
import time


router = Router()


@router.message(Command(commands=["start"]),
                ChatTypeFilter(chat_type=["private"]))
async def get_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!' +
            '\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PariMate! –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –º–æ—Ç–∏–≤–∞—Ü–∏—é üí™' +
            ' –∏ —Å–º–æ–∂–µ—à—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π.'
            '\n–í—ã–±–∏—Ä–∞–π –∂–µ–ª–∞–µ–º—É—é –ø—Ä–∏–≤—ã—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏—Ç—å, –∞ –º—ã'
            ' –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ —Å–æ —Å—Ö–æ–∂–µ–π —Ü–µ–ª—å—é –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º üïë.'
            '\n–í–ø–µ—Ä–µ–¥ –∫ –Ω–æ–≤—ã–º –ø–æ–±–µ–¥–∞–º –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º !',
            reply_markup=get_start_kb()
            )


@router.message(Command(commands=["menu"]),
                ChatTypeFilter(chat_type=["private"]))
@router.callback_query(
    F.data.startswith("menu"), ChatTypeFilter(chat_type=["private"]))
async def get_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=get_main_menu()
            )


@router.message(Command(commands=["menu", 'profile']),
                ChatTypeFilter(chat_type=["group", "supergroup"]))
async def get_group_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:' +
        '\n\n/pari -> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∏'
        '\n/help -> –ü–æ–º–æ—â—å'
        '\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–º—É –º–µ–Ω—é, ' +
        '–Ω–∞–ø–∏—à–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º')


@router.message(Command(commands=["help"]),
                ChatTypeFilter(chat_type=["group", "supergroup"]))
@router.message(F.text.casefold().in_(['–ø–æ–º–æ—â—å']),
                ChatTypeFilter(chat_type=["group", "supergroup"]))
async def get_info(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
            '/pari -> –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:' +
            '\n\nüîò –î–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞—Ä–∏' +
            '\n(–¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä–∏)'
            '\nüîò –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π —á–∞—Ç' +
            '\n(–∫–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç —Å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º)'
            '\nüîò –û—Ç—á–µ—Ç—ã –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞' +
            '\n(–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞)' +
            '\nüîò –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ ' +
            '\n(–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö, ' +
            '—Ñ–æ—Ä–º–∞—Ç: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∫—Ä—É–∂–æ—á–∫–∏/—Ç–µ–∫—Å—Ç)' +
            '\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: @kikikita1337')


@router.message(Command(commands=["help"]),
                ChatTypeFilter(chat_type=["private"]))
@router.message(F.text.casefold().in_(['–ø–æ–º–æ—â—å']),
                ChatTypeFilter(chat_type=["private"]))
async def get_private_info(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
            '/menu -> –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:' +
            '\n\nüîò –ù–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é' +
            '\n(–ø–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∏)' +
            '\nüîò –ú–æ–∏ –ø–∞—Ä–∏' +
            '\n(—Ä–∞–∑–¥–µ–ª —Å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–∞—Ä–∏)' +
            '\nüîò –ü—Ä–æ—Ñ–∏–ª—å' +
            '\n(—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è)' +
            '\nüîò –ü–æ–º–æ—â—å' +
            '\n(—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è)' +
            '\n\n/pari -> —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∏:' +
            '\n\nüîò –î–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞—Ä–∏' +
            '\n(–¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä–∏)'
            '\nüîò –ü–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π —á–∞—Ç' +
            '\n(–∫–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞ –≤ —á–∞—Ç —Å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º)'
            '\nüîò –û—Ç—á–µ—Ç—ã –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞' +
            '\n(–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞)' +
            '\nüîò –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ ' +
            '\n(–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö, ' +
            '—Ñ–æ—Ä–º–∞—Ç: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–∫—Ä—É–∂–æ—á–∫–∏/—Ç–µ–∫—Å—Ç)' +
            '\n\n/profile -> –ø—Ä–æ—Ñ–∏–ª—å:' +
            '\n\nüîò –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ' +
            '\n(—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è)'
            '\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: @kikikita1337')


@router.message(Command(commands=["chat"]),
                ChatTypeFilter(chat_type=["group", "supergroup"]))
async def get_chat_update(message: Message, bot: Bot):
    if message.from_user.id == settings.bots.admin_id or\
            message.from_user.id in settings.bots.moder_ids:
        chat_link = await bot.create_chat_invite_link(message.chat.id)
        info_msg = await bd_chat_create(message.chat.id, chat_link.invite_link)
        msg = await message.answer(info_msg)
        time.sleep(1)
        await bot.delete_message(message.chat.id, msg.message_id)
        await message.delete()
    else:
        return


@router.message(Command(commands=["chat_info"]),
                ChatTypeFilter(chat_type=["group", "supergroup"]))
async def get_chat_info(message: Message, bot: Bot):
    if message.from_user.id == settings.bots.admin_id:
        chat_link = await bot.create_chat_invite_link(message.chat.id)
        await message.answer(
            f'Chat_id: {message.chat.id}' +
            f'\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_link}')
        await message.delete()
    else:
        return


@router.message(Command(commands=["get_my_id"]))
async def get_my_id(message: Message, bot: Bot):
    await message.answer(f'{message.from_user.id}')


@router.message(F.text.startswith('/unban_'))
async def unban(message: Message, bot: Bot):
    if message.from_user.id == settings.bots.admin_id:
        user_id = message.text.split("_")[1]
        chat_id = message.text.split("_")[2]
        if chat_id is not None:
            if len(chat_id) > 22:
                chat_id = await bd_get_chat_id(chat_id)
            await bot.unban_chat_member(
                    str(chat_id), user_id)
            await message.answer(f'{user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω')
        else:
            await message.answer('–ù–µ —É–∫–∞–∑–∞–Ω chat_id')
        await message.delete()
    else:
        return


@router.message(F.text.startswith('/ban_'))
async def ban(message: Message, bot: Bot):
    if message.from_user.id == settings.bots.admin_id:
        user_id = message.text.split("_")[1]
        chat_id = message.text.split("_")[2]
        if chat_id is not None:
            if len(chat_id) > 22:
                chat_id = await bd_get_chat_id(chat_id)
            await bot.ban_chat_member(
                    str(chat_id), user_id)
            await message.answer(f'{user_id} –∑–∞–±–∞–Ω–µ–Ω')
        else:
            await message.answer('–ù–µ —É–∫–∞–∑–∞–Ω chat_id')
        await message.delete()
    else:
        return


@router.message(F.text.startswith('/get_user_'))
async def funcname(message: Message, bot: Bot):
    if message.from_user.id == settings.bots.admin_id or\
            message.from_user.id in settings.bots.moder_ids:
        try:
            user_id = int(message.text.split("_")[2])
            user = await bd_user_select(user_id)
        except Exception:
            username = message.text.split("_")[2]
            user = await bd_user_select(username=username)
        if user:
            await message.answer(
                text=f'ID: {user["user_id"]} \nUsername: @{user["username"]}' +
                f'\n–ò–º—è: {user["name"]}' +
                f'\n–í–æ–∑—Ä–∞—Å—Ç: {user["age"]}, –ü–æ–ª: {user["sex"]}' +
                f'\n–ü—Ä–∏–≤—ã—á–∫–∞: {user["habit_choice"]}' +
                f'\n–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: {user["habit_frequency"]} –¥–Ω–µ–π' +
                f'\n–ü–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user["habit_mate_sex"]}',
                reply_markup=get_user_link(user["user_id"]))
        else:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    else:
        return
