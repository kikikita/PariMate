from aiogram import Bot, Router, F
from aiogram.types import CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from core.keyboards.inline import pari_find_start, pari_find
from core.database.bd import (
    bd_time_find_update, bd_status_clear, bd_notify_update,
    bd_chat_update, bd_user_select, bd_chat_delete)
from core.filters.chat_type import ChatTypeFilter


router = Router()
router.message.filter(
    ChatTypeFilter(chat_type=["private"])
)


# find_cancel #find_accept #find_decline
@router.callback_query(F.data.startswith("find_start"))
async def find_start(callback: CallbackQuery):
    await callback.message.edit_text(
        '‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ...' +
        '\n‚úâ –°–æ–æ–±—â–∏–º, –∫–∞–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ',
        reply_markup=pari_find())
    await bd_time_find_update(callback.from_user.id)
    await callback.answer()


# find_cancel
@router.callback_query(F.data.startswith("find_cancel"))
async def find_cancel(callback: CallbackQuery, bot: Bot):
    try:
        action = callback.data.split("_")[2]
    except Exception:
        pass
    user = await bd_user_select(callback.from_user.id)
    if user['pari_mate_id'] and action != 'reject':
        await callback.message.edit_text(
            '–ú—ã –Ω–∞—à–ª–∏ –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ' +
            '\n–ü—Ä–æ–≤–µ—Ä—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ üëá')
        return
    else:
        if user['time_pari_start']:
            if user['pari_mate_id']:
                await callback.message.edit_text(
                    '–ü–∞—Ä–∏ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å')
            else:
                await callback.message.edit_text(
                    '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω, –ø–∞—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –±–µ–∑ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞' +
                    '\nü§ñ –¢–≤–æ–∏ –æ—Ç—á–µ—Ç—ã –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å PariMate')
                await bd_status_clear(callback.from_user.id, bot=bot)
            return
        days_string = (str(user["habit_notification_day"])[1:-1]
                       .replace("'", ""))
        time_string = (str(user["habit_notification_time"])[1:-1]
                       .replace("'", ""))
        await callback.message.edit_text('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω')
        await callback.message.answer(
            f'–¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏:'
            f'\n\nüéØ –¶–µ–ª—å: {user["habit_choice"]}' +
            f'\nüìÖ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: {days_string}' +
            f'\nüîî –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {time_string}' +
            f'\nüöª –ü–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user["habit_mate_sex"]}',
            reply_markup=pari_find_start()
        )
        await bd_status_clear(callback.from_user.id, bot=bot)
        # if result['time_pari_start'] is None:
        await bd_chat_delete(callback.from_user.id, bot=bot)


@router.callback_query(F.data.startswith("find_accept"))
async def find_accept(callback: CallbackQuery, bot: Bot,
                      scheduler: AsyncIOScheduler):
    await callback.message.edit_text('–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞')
    await bd_notify_update(callback.from_user.id)
    await bd_chat_update(callback.from_user.id, bot, scheduler)
