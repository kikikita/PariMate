from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from core.keyboards.inline import pari_find_start, pari_find
from core.database.bd import (
    bd_time_find_update,
    bd_habit_update, bd_mate_find, bd_user_select, bd_status_clear,
    bd_chat_update, bd_chat_delete, bd_notify_update)
from core.filters.chat_type import ChatTypeFilter
from aiogram.fsm.context import FSMContext


router = Router()
router.message.filter(
    ChatTypeFilter(chat_type=["private"])
)


# async def state_fill(user_id: int, state: FSMContext):
#     data = await bd_user_select(user_id)
#     data['habit_notification_day'] = ast.literal_eval(
#             data['habit_notification_day'])
#     data['habit_notification_time'] = ast.literal_eval(
#             data['habit_notification_time'])
#     await state.update_data(data)
#     return data

#find_cancel #find_accept #find_decline
@router.callback_query(F.data.startswith("find_start"))
async def find_start(callback: CallbackQuery):
    await callback.message.edit_text(
        '‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ...' +
        '\n‚úâ –°–æ–æ–±—â–∏–º, –∫–∞–∫ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ',
        reply_markup=pari_find())
    await bd_time_find_update(callback.from_user.id)
    await callback.answer()


#find_cancel
@router.callback_query(F.data.startswith("find_cancel"))
async def find_cancel(callback: CallbackQuery):
    user = await bd_status_clear(callback.from_user.id)
    days_string = (str(user["habit_notification_day"])[1:-1]
                   .replace("'", ""))
    time_string = (str(user["habit_notification_time"])[1:-1]
                   .replace("'", ""))
    await callback.message.edit_text('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω')
    await callback.message.answer(
        f'–¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤—ã—á–∫–∏:'
        f'\n\nüéØ –¶–µ–ª—å: {user["habit_choice"]}' +
        f'\nüìÖ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: {days_string}' +
        f'\nüîî –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {time_string}' +
        f'\nüöª –ü–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user["habit_mate_sex"]}',
        reply_markup=pari_find_start()
    )

# async def pari_mate_find(message: Message, state: FSMContext,
#                          scheduler: AsyncIOScheduler, bot: Bot):
#     data = await bd_user_select(message.from_user.id)
#     if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫':
#         await message.answer('–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω')
#         await bd_status_clear(message.from_user.id)
#         await message.answer(
#             '–° –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∑–∞–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∏?',
#             reply_markup=mate_kb())
#         await state.set_state(Habit.habit_mate_sex)
#         get_find_job = scheduler.get_job(f'mate_find_{message.from_user.id}')
#         get_cncl_job = scheduler.get_job(f'mate_cancel_{message.from_user.id}')
#         if get_find_job and get_cncl_job:
#             scheduler.remove_job(f'mate_find_{message.from_user.id}')
#             scheduler.remove_job(f'mate_cancel_{message.from_user.id}')
#         elif get_find_job and not get_cncl_job:
#             scheduler.remove_job(f'mate_find_{message.from_user.id}')
#         elif not get_find_job and get_cncl_job:
#             scheduler.remove_job(f'mate_cancel_{message.from_user.id}')
#         else:
#             pass

#     elif message.text == '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è':
#         await message.answer('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–∞—Ä–∏')
#         await bd_status_clear(message.from_user.id)
#         await message.answer(
#             '–° –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∑–∞–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∏?',
#             reply_markup=mate_kb())
#         await state.set_state(Habit.habit_mate_sex)
#         await bd_chat_delete(message.from_user.id)
#         get_find_job = scheduler.get_job(f'mate_find_{message.from_user.id}')
#         get_cncl_job = scheduler.get_job(f'mate_cancel_{message.from_user.id}')
#         if get_find_job and get_cncl_job:
#             scheduler.remove_job(f'mate_find_{message.from_user.id}')
#             scheduler.remove_job(f'mate_cancel_{message.from_user.id}')
#         elif get_find_job and not get_cncl_job:
#             scheduler.remove_job(f'mate_find_{message.from_user.id}')
#         elif not get_find_job and get_cncl_job:
#             scheduler.remove_job(f'mate_cancel_{message.from_user.id}')
#         else:
#             pass

#     elif message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–∏':
#         get_job = scheduler.get_job(f'chat_find_{message.from_user.id}')
#         if not get_job:
#             scheduler.add_job(
#                 bd_chat_update, trigger='interval',
#                 seconds=5, id=f'chat_find_{message.from_user.id}',
#                 kwargs={'user_id': message.from_user.id,
#                         'mate_id': data['pari_mate_id'],
#                         'scheduler': scheduler,
#                         'state': state,
#                         'bot': bot})
#         await message.answer('–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞...')
#         await state.set_state(Habit.remove_confirm)

#     else:
#         get_job = scheduler.get_job(f'mate_find_{message.from_user.id}')
#         if not get_job:
#             scheduler.add_job(
#                 bd_mate_find, trigger='interval',
#                 seconds=1, id=f'mate_find_{message.from_user.id}',
#                 kwargs={'message': message,
#                         'scheduler': scheduler,
#                         'state': state,
#                         'bot': bot})


# @router.message(Habit.remove_confirm,
#                 F.text.casefold().in_(['–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è', '–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫']))
# async def remove_confirm(message: Message, state: FSMContext,
#                          scheduler: AsyncIOScheduler):
#     get_job = scheduler.get_job(f'mate_cancel_{message.from_user.id}')
#     if get_job:
#         scheduler.remove_job(f'mate_cancel_{message.from_user.id}')
#     await bd_status_clear(message.from_user.id)
#     await bd_chat_delete(message.from_user.id)
#     await message.answer('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–∞—Ä–∏')
#     await message.answer(
#         '–° –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –∑–∞–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∏?',
#         reply_markup=mate_kb())
#     await state.set_state(Habit.habit_mate_sex)


# @router.message(Habit.remove_confirm)
# async def incorrect_remove_confirm(message: Message, state: FSMContext):
#     if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–∞—Ä–∏':
#         await message.answer('–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–∞—Ä–∏')
#     await message.answer('–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞...')